module prj2 (
    input clk,
    input s1,
    input s2,
    input m1,
    input m2,
    input m3,
    input m4,
    input len1,
    input len2,
    output q0,
    output q1,
    output q2,
    output q3,
    output q4,
    output a,
    output b,
    output c,
    output d,
    output e,
    output f,
    output g
);

    wire [4:0] counter_q;
    wire [6:0] morse_seg;

    counter u_counter(
        .clk(clk),
        .q0(counter_q[0]),
        .q1(counter_q[1]),
        .q2(counter_q[2]),
        .q3(counter_q[3]),
        .q4(counter_q[4])
    );


    morse_combinational u_morse(
        .m1(m1),
        .m2(m2),
        .m3(m3),
        .m4(m4),
        .len1(len1),
        .len2(len2),
        .seg(morse_seg)
    );


    assign {q0, q1, q2, q3, q4} = (s1 && ~s2) ? counter_q : 5'b00000;
    assign {a, b, c, d, e, f, g} = (~s1 && s2) ? morse_seg : 7'b1111111;

endmodule

module counter(
    input clk,
    output q0,
    output q1,
    output q2,
    output q3,
    output q4
);
    wire [4:0] d;

    d_ff d1(.d(d[0]), .clk(clk), .q(q0));
    d_ff d2(.d(d[1]), .clk(clk), .q(q1));
    d_ff d3(.d(d[2]), .clk(clk), .q(q2));
    d_ff d4(.d(d[3]), .clk(clk), .q(q3));
    d_ff d5(.d(d[4]), .clk(clk), .q(q4));

    assign d[0] = (q0 & q1 & q2 & ~q4) | (q0 & q1 & ~q3 & ~q4) | (q0 & ~q2 & ~q3 & ~q4) | (~q1 & ~q2 & ~q3 & ~q4);
    assign d[1] = (q0 & ~q2 & ~q3 & ~q4) | (q0 & q1 & ~q3 & ~q4) | (q0 & q1 & q2 & ~q4) | (q0 & q1 & q2 & q3);
    assign d[2] = (q0 & q1 & ~q3 & ~q4) | (q0 & q1 & q2 & ~q4) | (q0 & q1 & q2 & q3) | (q1 & q2 & q3 & q4);
    assign d[3] = (q0 & q1 & q2 & ~q4) | (q0 & q1 & q2 & q3) | (q1 & q2 & q3 & q4) | (~q0 & q2 & q3 & q4);
    assign d[4] = (q0 & q1 & q2 & q3) | (q1 & q2 & q3 & q4) | (~q0 & q2 & q3 & q4) | (~q0 & ~q1 & q3 & q4);

endmodule

module morse_combinational(
    input m1,
    input m2,
    input m3,
    input m4,
    input len1,
    input len2,
    output reg [6:0] seg
);
    always @(*) begin
        if (~len1 & ~len2) begin
            if (~m1 & ~m2 & ~m3 & ~m4) begin // E
                seg = 7'b0110000;
            end else if (m1&(~m2)&(~m3)&(~m4)) begin // T
                seg = 7'b1110000;
            end else begin
                     seg = 7'b1111111;
                end
        end else if (~len1 & len2) begin
            if (~m1 & ~m2 & ~m3 & ~m4) begin // i
                seg = 7'b1001111;
            end else if (m1 & ~m2 & ~m3 & ~m4) begin // n
                seg = 7'b0001001;
            end else if (m1 & m2 & ~m3 & ~m4) begin // M
                seg = 7'b0101011;
            end else if (~m1 & m2 & ~m3 & ~m4) begin // A
                seg = 7'b0001000;
            end else begin
                seg = 7'b1111111; // Invalid
            end
        end else if (len1 & ~len2) begin
            if (m1 & ~m2 & ~m3 & ~m4) begin // D
                seg = 7'b0000001;
            end else if (m1 & m2 & ~m3 & ~m4) begin // G
                seg = 7'b0000100;
            end else if (m1 & ~m2 & m3 & ~m4) begin // K
                seg = 7'b1111000;
            end else if (m1 & m2 & m3 & ~m4) begin // O
                seg = 7'b1100010;
            end else if (~m1 & m2 & ~m3 & ~m4) begin // R
                seg = 7'b0111001;
            end else if (~m1 & ~m2 & ~m3 & ~m4) begin // S
                seg = 7'b0100100;
            end else if (~m1 & ~m2 & m3 & ~m4) begin // U
                seg = 7'b1000001;
            end else if (~m1 & m2 & m3 & ~m4) begin // W
                seg = 7'b1010101;
            end else begin
                seg = 7'b1111111; // Invalid
            end
        end else begin
            if (m1 & ~m2 & ~m3 & ~m4) begin // D
                seg = 7'b0000000;
            end else if (m1 & ~m2 & m3 & ~m4) begin // C
                seg = 7'b0110001;
            end else if (~m1 & ~m2 & m3 & ~m4) begin // F
                seg = 7'b0111000;
            end else if (~m1 & ~m2 & ~m3 & ~m4) begin // h
                seg = 7'b1001000;
            end else if (~m1 & m2 & m3 & m4) begin // j
                seg = 7'b1000111;
            end else if (~m1 & m2 & ~m3 & ~m4) begin // l
                seg = 7'b1110011;
            end else if (~m1 & m2 & m3 & ~m4) begin // p
                seg = 7'b0011000;
            end else if (m1 & m2 & ~m3 & m4) begin // q
                seg = 7'b0001100;
            end else if (~m1 & ~m2 & ~m3 & m4) begin // v
                seg = 7'b1100011;
            end else if (m1 & ~m2 & ~m3 & m4) begin // x
                seg = 7'b1001110;
            end else if (m1 & ~m2 & m3 & m4) begin // y
                seg = 7'b1000100;
            end else if (m1 & m2 & ~m3 & ~m4) begin // z
                seg = 7'b0010010;
            end else begin
                seg = 7'b1111111; // Invalid
            end
        end
    end
endmodule

module d_ff(
    input d,
    input clk,
    output reg q
);
    always @(posedge clk) begin
        q <= d;
    end
endmodule
